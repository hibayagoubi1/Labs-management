pipeline {
    agent any

    tools {
        maven 'Maven-4.0.0'
        jdk 'JDK17'
    }

    environment {
        GIT_REPO_NAME = "Labs-management"
        GIT_USER_NAME = "hibayagoubi1"
        ARGOCD_SERVER = 'localhost:8082'  
        ARGOCD_USERNAME = 'admin'         
        ARGOCD_PASSWORD = 'nr39-kXYM8LPbi6P'  
        APP_NAME = 'lab-service' // Le nom de votre application dans ArgoCD
        DOCKER_IMAGE_NAME = "hibayaagoubi/lab-service"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/hibayagoubi1/Labs-management.git'
            }
        }

       stage('Build and Test') {
    steps {
        bat 'cd labs-service/labs-service && mvn clean package -Dspring.profiles.active=test'
    }
}


        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
                    bat "cd labs-service/labs-service && mvn sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONAR_TOKEN%"
                }
            }
        }

      stage('Build and Push Docker Image') {
    steps {
        script {
            def dockerImageTag = "${BUILD_NUMBER}"
            def fullDockerImage = "${DOCKER_IMAGE_NAME}:${dockerImageTag}"
            
            // Build and push the Docker image with SPRING_PROFILES_ACTIVE set to prod
            bat """
                cd identity-service
                docker build --build-arg SPRING_PROFILES_ACTIVE=prod -t ${fullDockerImage} .
            """
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                docker.image(fullDockerImage).push()
            }
        }
    }
}


        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    bat """
                        git config user.email "hibayagoubi4@gmail.com"
                        git config user.name "${GIT_USER_NAME}"

                        # Replace the Docker image tag in the deployment file
                        powershell -Command "(gc labs-service-manifests/labs-deployment.yml) -replace '(?<=image: ${DOCKER_IMAGE_NAME}:).*', '${BUILD_NUMBER}' | sc labs-service-manifests/labs-deployment.yml"

                        # Commit and push the changes
                        git add labs-service-manifests/labs-deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    """
                }
            }
        }

        stage('Login to ArgoCD') {
            steps {
                bat """
                set PATH=C:\\Program Files\\Jenkins;%PATH%
                argocd login %ARGOCD_SERVER% --username %ARGOCD_USERNAME% --password %ARGOCD_PASSWORD% --insecure
                """
            }
        }

        stage('Sync Application') {
            steps {
                bat """
                  set PATH=C:\\Program Files\\Jenkins;%PATH%                   
                  argocd app sync %APP_NAME%
               """
            }
        }

        stage('Check Application Status') {
            steps {
                bat """
                   set PATH=C:\\Program Files\\Jenkins;%PATH% 
                   argocd app wait %APP_NAME% --health --timeout 300
                """
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}